<?php
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * @file
 * Functions to support theming in the Sass Start theme.
 */



/**
 *  Block suggestions for custom block bundles.
 */
function sass_theme_msd_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}


// function sass_theme_msd_preprocess_breadcrumb(&$variables) {
//   $breadcrumb = &$variables['breadcrumb'];
//   $path = \Drupal::service('path.current')->getPath();

//   // Clear any existing breadcrumbs from Easy Breadcrumb or other sources.
//   $breadcrumb = [];

//   // Add the 'home' link.
//   $breadcrumb[] = Link::createFromRoute('Home', '<front>')->toString();

//   // Check if the current path is '/product-listing'.
//   if ($path == '/product-listing') {
//     $breadcrumb[] = 'Product Listing';
//   }
//   // Check if the current path contains '/product-listing' with a taxonomy ID.
//   elseif (strpos($path, '/product-listing/') === 0) {
//     // Add the 'product-listing' link.
//     $breadcrumb[] = Link::createFromRoute('Product Listing', 'view.product_listing.page_1')->toString();

//     // Get the taxonomy ID from the path.
//     $taxonomy_id = str_replace('/product-listing/', '', $path);

//     // Load the taxonomy term by ID.
//     if ($taxonomy_id && is_numeric($taxonomy_id)) {
//       $term = Term::load($taxonomy_id);
//       if ($term) {
//         // Add the taxonomy term title to the breadcrumbs.
//         $breadcrumb[] = $term->getName();
//       }
//     }
//   }
//   dump($breadcrumb);
// }

/**
 * Implements hook_preprocess_breadcrumb().
 */
// function sass_theme_msd_preprocess_breadcrumb(&$variables) {
//   $breadcrumb = &$variables['breadcrumb'];
//   $path = \Drupal::service('path.current')->getPath();

//   // Clear any existing breadcrumbs from other sources.
//   $breadcrumb = [];

//   // Add the 'home' link.
//   $breadcrumb[] = Link::createFromRoute('Home', '<front>')->toString();

//   // Add the 'product-listing' link if it's part of the current path.
//   if (strpos($path, '/product-listing') === 0) {
//     // Construct the URL for 'Product Listing' page using base path.
//     $product_listing_url = Url::fromUri('internal:/product-listing')->toString();
//     $breadcrumb[] = '<a href="' . $product_listing_url . '">Product Listing</a>';

//     // Extract the taxonomy ID from the path.
//     $taxonomy_id = str_replace('/product-listing/', '', $path);

//     if ($taxonomy_id && is_numeric($taxonomy_id)) {
//       // Load the current taxonomy term.
//       $term = Term::load($taxonomy_id);

//       if ($term) {
//         // Check if the term has a parent.
//         $parent_term_id = $term->get('parent')->target_id;
//         if ($parent_term_id) {
//           // Load the parent term.
//           $parent_term = Term::load($parent_term_id);

//           if ($parent_term) {
//             // Construct the URL for the parent term.
//             $parent_url = Url::fromUri('internal:/product-listing/' . $parent_term_id)->toString();

//             // Insert the parent term link before the current term in the breadcrumb.
//             $breadcrumb[] = '<a href="' . $parent_url . '">' . $parent_term->getName() . '</a>';
//           }
//         }

//         // Add the current term's title as the last breadcrumb item.
//         $breadcrumb[] = $term->getName();
//       }
//     }
//   }
// }

/**
 * Implements theme_preprocess_superfish_menu_item()
 * With elements from https://www.drupal.org/project/superfish/issues/2958789#comment-12568378
 */
function sass_theme_msd_preprocess_superfish_menu_items(array &$variables) {
    template_preprocess_superfish_menu_items($variables);

    // Get the menu name
    $menu_id = $variables['element']['#menu_name'];
    // Iterate through the menu items
    foreach ($variables['menu_items'] as &$menu_item) {
        $menu_item_id = $menu_item['attributes']['id']->value();
        // Get the Menu Item Extras by UUID and menu name, using a helper function
        $entity = \Drupal::entityTypeManager()
            ->getStorage('menu_link_content')
            ->loadByProperties([
                'menu_name' => $menu_id,
                'uuid' => _MYTHEME_superfish_uuid($menu_item_id)
                ]);
        // This should return an array with one item with an arbitrary numeric key, get the value
        $entity = reset($entity);
        // verify that the resulting value is an Entity, build a view, and add it to the menu item
        if ($entity instanceof \Drupal\Core\Entity\EntityInterface) {
            $view_builder = \Drupal::entityTypeManager()->getViewBuilder($entity->getEntityTypeId());
            // Provide a view mode to allow control of which fields appear in the Superfish menu
            $entity_view = $view_builder->view($entity, 'superfish');
            $menu_item['entity'] = $entity_view;
            $menu_item['entity']['#show_item_link'] = FALSE;
        }
    }
}

/**
 * @param $uuid, a Superfish ID
 * @return string $uuid
 *
 * Helper function to extract a UUID from a Superfish menu item ID string
 */
function _MYTHEME_superfish_uuid($uuid) {
    $uuid = preg_replace('/^.*-menu-link-content/', '', $uuid);
    $uuid = explode("--", $uuid);
    $uuid = $uuid[0];
    return $uuid;
}